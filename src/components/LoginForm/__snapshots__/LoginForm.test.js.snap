// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`LoginForm should match the snapshot when the login button is clicked 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginForm
    history={
      Object {
        "location": Object {
          "state": "",
        },
      }
    }
    user={
      Object {
        "id": 1,
        "name": "bob",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <NavLink
          activeClassName="active"
          ariaCurrent="true"
          to="/login/"
        >
          <button
            className="login-button "
            name="logIn"
            onClick={[Function]}
          >
            Log In
          </button>
        </NavLink>,
        <NavLink
          activeClassName="active"
          ariaCurrent="true"
          to="/login/sign-up"
        >
          <button
            className="sign-up-button non-focused"
            name="signUp"
            onClick={[Function]}
          >
            Sign Up
          </button>
        </NavLink>,
        <article
          className="signUp"
        >
          <form
            onSubmit={[Function]}
          >
            <h3
              className="error-message"
            />
            <h3
              className="error-message"
            >
              
            </h3>
            <Route
              exact={true}
              path="/login/sign-up"
              render={[Function]}
            />
            <label>
               E-mail:
              <input
                name="email"
                onChange={[Function]}
                placeholder="example@email.com"
                required={true}
                type="email"
                value=""
              />
            </label>
            <br />
            <label>
               Password:
              <input
                name="password"
                onChange={[Function]}
                placeholder="password"
                required={true}
                type="password"
                value=""
              />
            </label>
            <input
              type="submit"
            />
          </form>
        </article>,
      ],
      "className": "login-wrap",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "ariaCurrent": "true",
          "children": <button
            className="login-button "
            name="logIn"
            onClick={[Function]}
          >
            Log In
          </button>,
          "to": "/login/",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Log In",
            "className": "login-button ",
            "name": "logIn",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Log In",
          "type": "button",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "ariaCurrent": "true",
          "children": <button
            className="sign-up-button non-focused"
            name="signUp"
            onClick={[Function]}
          >
            Sign Up
          </button>,
          "to": "/login/sign-up",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sign Up",
            "className": "sign-up-button non-focused",
            "name": "signUp",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Sign Up",
          "type": "button",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form
            onSubmit={[Function]}
          >
            <h3
              className="error-message"
            />
            <h3
              className="error-message"
            >
              
            </h3>
            <Route
              exact={true}
              path="/login/sign-up"
              render={[Function]}
            />
            <label>
               E-mail:
              <input
                name="email"
                onChange={[Function]}
                placeholder="example@email.com"
                required={true}
                type="email"
                value=""
              />
            </label>
            <br />
            <label>
               Password:
              <input
                name="password"
                onChange={[Function]}
                placeholder="password"
                required={true}
                type="password"
                value=""
              />
            </label>
            <input
              type="submit"
            />
          </form>,
          "className": "signUp",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h3
                className="error-message"
              />,
              <h3
                className="error-message"
              >
                
              </h3>,
              <Route
                exact={true}
                path="/login/sign-up"
                render={[Function]}
              />,
              <label>
                 E-mail:
                <input
                  name="email"
                  onChange={[Function]}
                  placeholder="example@email.com"
                  required={true}
                  type="email"
                  value=""
                />
              </label>,
              <br />,
              <label>
                 Password:
                <input
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  required={true}
                  type="password"
                  value=""
                />
              </label>,
              <input
                type="submit"
              />,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "error-message",
              },
              "ref": null,
              "rendered": null,
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "className": "error-message",
              },
              "ref": null,
              "rendered": "",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "exact": true,
                "path": "/login/sign-up",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " E-mail:",
                  <input
                    name="email"
                    onChange={[Function]}
                    placeholder="example@email.com"
                    required={true}
                    type="email"
                    value=""
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                " E-mail:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "name": "email",
                    "onChange": [Function],
                    "placeholder": "example@email.com",
                    "required": true,
                    "type": "email",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " Password:",
                  <input
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    required={true}
                    type="password"
                    value=""
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                " Password:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "name": "password",
                    "onChange": [Function],
                    "placeholder": "password",
                    "required": true,
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
        "type": "article",
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            to="/login/"
          >
            <button
              className="login-button "
              name="logIn"
              onClick={[Function]}
            >
              Log In
            </button>
          </NavLink>,
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            to="/login/sign-up"
          >
            <button
              className="sign-up-button non-focused"
              name="signUp"
              onClick={[Function]}
            >
              Sign Up
            </button>
          </NavLink>,
          <article
            className="signUp"
          >
            <form
              onSubmit={[Function]}
            >
              <h3
                className="error-message"
              />
              <h3
                className="error-message"
              >
                
              </h3>
              <Route
                exact={true}
                path="/login/sign-up"
                render={[Function]}
              />
              <label>
                 E-mail:
                <input
                  name="email"
                  onChange={[Function]}
                  placeholder="example@email.com"
                  required={true}
                  type="email"
                  value=""
                />
              </label>
              <br />
              <label>
                 Password:
                <input
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  required={true}
                  type="password"
                  value=""
                />
              </label>
              <input
                type="submit"
              />
            </form>
          </article>,
        ],
        "className": "login-wrap",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "ariaCurrent": "true",
            "children": <button
              className="login-button "
              name="logIn"
              onClick={[Function]}
            >
              Log In
            </button>,
            "to": "/login/",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Log In",
              "className": "login-button ",
              "name": "logIn",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Log In",
            "type": "button",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "ariaCurrent": "true",
            "children": <button
              className="sign-up-button non-focused"
              name="signUp"
              onClick={[Function]}
            >
              Sign Up
            </button>,
            "to": "/login/sign-up",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign Up",
              "className": "sign-up-button non-focused",
              "name": "signUp",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Sign Up",
            "type": "button",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <form
              onSubmit={[Function]}
            >
              <h3
                className="error-message"
              />
              <h3
                className="error-message"
              >
                
              </h3>
              <Route
                exact={true}
                path="/login/sign-up"
                render={[Function]}
              />
              <label>
                 E-mail:
                <input
                  name="email"
                  onChange={[Function]}
                  placeholder="example@email.com"
                  required={true}
                  type="email"
                  value=""
                />
              </label>
              <br />
              <label>
                 Password:
                <input
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  required={true}
                  type="password"
                  value=""
                />
              </label>
              <input
                type="submit"
              />
            </form>,
            "className": "signUp",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h3
                  className="error-message"
                />,
                <h3
                  className="error-message"
                >
                  
                </h3>,
                <Route
                  exact={true}
                  path="/login/sign-up"
                  render={[Function]}
                />,
                <label>
                   E-mail:
                  <input
                    name="email"
                    onChange={[Function]}
                    placeholder="example@email.com"
                    required={true}
                    type="email"
                    value=""
                  />
                </label>,
                <br />,
                <label>
                   Password:
                  <input
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    required={true}
                    type="password"
                    value=""
                  />
                </label>,
                <input
                  type="submit"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "error-message",
                },
                "ref": null,
                "rendered": null,
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "className": "error-message",
                },
                "ref": null,
                "rendered": "",
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "exact": true,
                  "path": "/login/sign-up",
                  "render": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    " E-mail:",
                    <input
                      name="email"
                      onChange={[Function]}
                      placeholder="example@email.com"
                      required={true}
                      type="email"
                      value=""
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " E-mail:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "name": "email",
                      "onChange": [Function],
                      "placeholder": "example@email.com",
                      "required": true,
                      "type": "email",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    " Password:",
                    <input
                      name="password"
                      onChange={[Function]}
                      placeholder="password"
                      required={true}
                      type="password"
                      value=""
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " Password:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "name": "password",
                      "onChange": [Function],
                      "placeholder": "password",
                      "required": true,
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          "type": "article",
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;

exports[`LoginForm should match the snapshot when the signUp button is clicked 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <LoginForm
    history={
      Object {
        "location": Object {
          "state": "",
        },
      }
    }
    user={
      Object {
        "id": 1,
        "name": "bob",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <NavLink
          activeClassName="active"
          ariaCurrent="true"
          to="/login/"
        >
          <button
            className="login-button non-focused"
            name="logIn"
            onClick={[Function]}
          >
            Log In
          </button>
        </NavLink>,
        <NavLink
          activeClassName="active"
          ariaCurrent="true"
          to="/login/sign-up"
        >
          <button
            className="sign-up-button "
            name="signUp"
            onClick={[Function]}
          >
            Sign Up
          </button>
        </NavLink>,
        <article
          className="signUp"
        >
          <form
            onSubmit={[Function]}
          >
            <h3
              className="error-message"
            />
            <h3
              className="error-message"
            >
              
            </h3>
            <Route
              exact={true}
              path="/login/sign-up"
              render={[Function]}
            />
            <label>
               E-mail:
              <input
                name="email"
                onChange={[Function]}
                placeholder="example@email.com"
                required={true}
                type="email"
                value=""
              />
            </label>
            <br />
            <label>
               Password:
              <input
                name="password"
                onChange={[Function]}
                placeholder="password"
                required={true}
                type="password"
                value=""
              />
            </label>
            <input
              type="submit"
            />
          </form>
        </article>,
      ],
      "className": "login-wrap",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "ariaCurrent": "true",
          "children": <button
            className="login-button non-focused"
            name="logIn"
            onClick={[Function]}
          >
            Log In
          </button>,
          "to": "/login/",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Log In",
            "className": "login-button non-focused",
            "name": "logIn",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Log In",
          "type": "button",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "activeClassName": "active",
          "ariaCurrent": "true",
          "children": <button
            className="sign-up-button "
            name="signUp"
            onClick={[Function]}
          >
            Sign Up
          </button>,
          "to": "/login/sign-up",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Sign Up",
            "className": "sign-up-button ",
            "name": "signUp",
            "onClick": [Function],
          },
          "ref": null,
          "rendered": "Sign Up",
          "type": "button",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <form
            onSubmit={[Function]}
          >
            <h3
              className="error-message"
            />
            <h3
              className="error-message"
            >
              
            </h3>
            <Route
              exact={true}
              path="/login/sign-up"
              render={[Function]}
            />
            <label>
               E-mail:
              <input
                name="email"
                onChange={[Function]}
                placeholder="example@email.com"
                required={true}
                type="email"
                value=""
              />
            </label>
            <br />
            <label>
               Password:
              <input
                name="password"
                onChange={[Function]}
                placeholder="password"
                required={true}
                type="password"
                value=""
              />
            </label>
            <input
              type="submit"
            />
          </form>,
          "className": "signUp",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h3
                className="error-message"
              />,
              <h3
                className="error-message"
              >
                
              </h3>,
              <Route
                exact={true}
                path="/login/sign-up"
                render={[Function]}
              />,
              <label>
                 E-mail:
                <input
                  name="email"
                  onChange={[Function]}
                  placeholder="example@email.com"
                  required={true}
                  type="email"
                  value=""
                />
              </label>,
              <br />,
              <label>
                 Password:
                <input
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  required={true}
                  type="password"
                  value=""
                />
              </label>,
              <input
                type="submit"
              />,
            ],
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
                "className": "error-message",
              },
              "ref": null,
              "rendered": null,
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "",
                "className": "error-message",
              },
              "ref": null,
              "rendered": "",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "exact": true,
                "path": "/login/sign-up",
                "render": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " E-mail:",
                  <input
                    name="email"
                    onChange={[Function]}
                    placeholder="example@email.com"
                    required={true}
                    type="email"
                    value=""
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                " E-mail:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "name": "email",
                    "onChange": [Function],
                    "placeholder": "example@email.com",
                    "required": true,
                    "type": "email",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {},
              "ref": null,
              "rendered": null,
              "type": "br",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  " Password:",
                  <input
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    required={true}
                    type="password"
                    value=""
                  />,
                ],
              },
              "ref": null,
              "rendered": Array [
                " Password:",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "name": "password",
                    "onChange": [Function],
                    "placeholder": "password",
                    "required": true,
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "input",
                },
              ],
              "type": "label",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "type": "submit",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
          ],
          "type": "form",
        },
        "type": "article",
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            to="/login/"
          >
            <button
              className="login-button non-focused"
              name="logIn"
              onClick={[Function]}
            >
              Log In
            </button>
          </NavLink>,
          <NavLink
            activeClassName="active"
            ariaCurrent="true"
            to="/login/sign-up"
          >
            <button
              className="sign-up-button "
              name="signUp"
              onClick={[Function]}
            >
              Sign Up
            </button>
          </NavLink>,
          <article
            className="signUp"
          >
            <form
              onSubmit={[Function]}
            >
              <h3
                className="error-message"
              />
              <h3
                className="error-message"
              >
                
              </h3>
              <Route
                exact={true}
                path="/login/sign-up"
                render={[Function]}
              />
              <label>
                 E-mail:
                <input
                  name="email"
                  onChange={[Function]}
                  placeholder="example@email.com"
                  required={true}
                  type="email"
                  value=""
                />
              </label>
              <br />
              <label>
                 Password:
                <input
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  required={true}
                  type="password"
                  value=""
                />
              </label>
              <input
                type="submit"
              />
            </form>
          </article>,
        ],
        "className": "login-wrap",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "ariaCurrent": "true",
            "children": <button
              className="login-button non-focused"
              name="logIn"
              onClick={[Function]}
            >
              Log In
            </button>,
            "to": "/login/",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Log In",
              "className": "login-button non-focused",
              "name": "logIn",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Log In",
            "type": "button",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "activeClassName": "active",
            "ariaCurrent": "true",
            "children": <button
              className="sign-up-button "
              name="signUp"
              onClick={[Function]}
            >
              Sign Up
            </button>,
            "to": "/login/sign-up",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Sign Up",
              "className": "sign-up-button ",
              "name": "signUp",
              "onClick": [Function],
            },
            "ref": null,
            "rendered": "Sign Up",
            "type": "button",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <form
              onSubmit={[Function]}
            >
              <h3
                className="error-message"
              />
              <h3
                className="error-message"
              >
                
              </h3>
              <Route
                exact={true}
                path="/login/sign-up"
                render={[Function]}
              />
              <label>
                 E-mail:
                <input
                  name="email"
                  onChange={[Function]}
                  placeholder="example@email.com"
                  required={true}
                  type="email"
                  value=""
                />
              </label>
              <br />
              <label>
                 Password:
                <input
                  name="password"
                  onChange={[Function]}
                  placeholder="password"
                  required={true}
                  type="password"
                  value=""
                />
              </label>
              <input
                type="submit"
              />
            </form>,
            "className": "signUp",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <h3
                  className="error-message"
                />,
                <h3
                  className="error-message"
                >
                  
                </h3>,
                <Route
                  exact={true}
                  path="/login/sign-up"
                  render={[Function]}
                />,
                <label>
                   E-mail:
                  <input
                    name="email"
                    onChange={[Function]}
                    placeholder="example@email.com"
                    required={true}
                    type="email"
                    value=""
                  />
                </label>,
                <br />,
                <label>
                   Password:
                  <input
                    name="password"
                    onChange={[Function]}
                    placeholder="password"
                    required={true}
                    type="password"
                    value=""
                  />
                </label>,
                <input
                  type="submit"
                />,
              ],
              "onSubmit": [Function],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": undefined,
                  "className": "error-message",
                },
                "ref": null,
                "rendered": null,
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "",
                  "className": "error-message",
                },
                "ref": null,
                "rendered": "",
                "type": "h3",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "exact": true,
                  "path": "/login/sign-up",
                  "render": [Function],
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    " E-mail:",
                    <input
                      name="email"
                      onChange={[Function]}
                      placeholder="example@email.com"
                      required={true}
                      type="email"
                      value=""
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " E-mail:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "name": "email",
                      "onChange": [Function],
                      "placeholder": "example@email.com",
                      "required": true,
                      "type": "email",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {},
                "ref": null,
                "rendered": null,
                "type": "br",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": Array [
                    " Password:",
                    <input
                      name="password"
                      onChange={[Function]}
                      placeholder="password"
                      required={true}
                      type="password"
                      value=""
                    />,
                  ],
                },
                "ref": null,
                "rendered": Array [
                  " Password:",
                  Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "name": "password",
                      "onChange": [Function],
                      "placeholder": "password",
                      "required": true,
                      "type": "password",
                      "value": "",
                    },
                    "ref": null,
                    "rendered": null,
                    "type": "input",
                  },
                ],
                "type": "label",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "type": "submit",
                },
                "ref": null,
                "rendered": null,
                "type": "input",
              },
            ],
            "type": "form",
          },
          "type": "article",
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
    "disableLifecycleMethods": true,
  },
}
`;
